# -*- coding: utf-8 -*-
"""
Created on Sat May 23 15:34:16 2020

@author: Wong Wei Jie
"""
import requests
from time import time
import pandas as pd
from datetime import datetime, timedelta
from bs4 import BeautifulSoup
from selenium import webdriver


class fx_news_scraper:
    
    # retrieve DataFrane of news event details of a single day from Forex Factory Calendar (SG TimeZone)
    def ff_calendar_date(self, year, month, day):
    
        
        months = ['jan', 'feb', 'mar',
                  'apr', 'may', 'jun',
                  'jul', 'aug', 'sep',
                  'oct', 'nov', 'dec']
        
        #Dataframe to contain scraped data
        df = pd.DataFrame(columns=["time","event","currency","forecast"])
        
        query = '?day='+ months[month-1] + str(day) + '.' + str(year)
        
        #web server url
        server_url = "https://www.forexfactory.com/calendar"+query
        
        page = requests.get(server_url)
        
        soup = BeautifulSoup(page.text, "html5lib")
        
        
        #iterating each event
        for row in soup.find("table", class_="calendar__table").find_all("tr", class_=["calendar_row"]):
            
            raw_time = row.find("td", class_="calendar__cell calendar__time time").text
            currency = row.find("td", class_="calendar__cell calendar__currency currency ").text.strip('\n')
            event = row.find("span", class_="calendar__event-title").text
            forecast = row.find("td", class_="calendar__cell calendar__forecast forecast").text
            
            #parse time from UTC format to SG timezone
            timezone_offset = timedelta(hours = 12)
            
            #dictionary new row
            row = {}
            
            if raw_time!='':
                try:
                    time_utc = datetime.strptime(raw_time.upper(), "%I:%M%p") 
                    time_local = time_utc.replace(year = year, month = month, day = day)
                    time_local = time_local + timezone_offset
                except:
                    continue
                
            row['time'] = time_local
            row['event'] = event
            row['currency'] = currency
            row['forecast'] = forecast
            df = df.append(row, ignore_index=True)
            
            
            print(time_local.strftime("%m/%d/%Y %H:%M:%S"))
            print(currency) 
            print(event)
            print(forecast)
            
            print("------------------------------------------")
            
        return df
    
    # retrieve DataFrane of news event details of a single day from FXStreet Calendar (Time in UTC TimeZone)
    def fxst_calendar(self, year, month, day):
        
        month_list = ['January', 'February', 'March',
                      'April', 'May', 'June',
                      'July', 'August', 'September',
                      'October', 'November', 'December']
        
        
        browser = webdriver.Chrome('C:/Users/User/Documents/QAM/Sunmer_Project/chromedriver_win32/chromedriver')
        browser.get("https://www.fxstreet.com/economic-calendar")
        
        while True:
            try:
                #Find FX calendar news element
                fx_calendar = browser.find_element_by_xpath('//*[@id="Content_C164_Col00"]/div[4]')
                
                #Selects calendar
                calendar_filter = fx_calendar.find_element_by_css_selector(' div > div:nth-child(1) > div > div > div.fxs_c_time-filters.fxs_c_time-filters > div.fxs_c_DatePicker-Wrapper')
                
                #Executes a click (Open calendar)
                browser.execute_script("arguments[0].click();", calendar_filter.find_element_by_tag_name("button"))
                
                break
            
            except:
                print("loading..")
                continue
        
        
        
        
        while True:
            try:
                    daypicker = calendar_filter.find_element_by_class_name('DayPicker-wrapper')
                    
                    next_month = daypicker.find_element_by_class_name("DayPicker-NavBar")\
                    .find_element_by_class_name("DayPicker-NavButton--next")
                    
                    prev_month = daypicker.find_element_by_class_name("DayPicker-NavBar")\
                    .find_element_by_class_name("DayPicker-NavButton--prev")
                    
                    break
            except:
                    
                    continue
                
        print(daypicker.text)
        
        
        
        # Decrement month by 1 to be used as index for month_list
        month = month - 1
        
        while True:
            
            month_elements = daypicker.find_elements_by_class_name("DayPicker-Month")
        
            month_1 = month_elements[0].find_element_by_class_name("DayPicker-Caption").text.split(" ")
        
            month_2 = month_elements[1].find_element_by_class_name("DayPicker-Caption").text.split(" ")
            
            curr_year = int(month_1[1])
            
            print("curr_year : ", curr_year)
            print("month_1[0] : ", month_1[0])
            print("month_2[0] : ", month_2[0])
            print("target month : ", month_list[month])
            print("-----------------------")
            
            if (month_1[0] == month_list[month] or month_2[0] == month_list[month])\
            and curr_year == year:
                
                if month_1[0] == month_list[month]:
                    selected_month = month_elements[0]
                else:
                    selected_month = month_elements[1]
                    
                weeks = selected_month.find_element_by_class_name("DayPicker-Body").find_elements_by_class_name("DayPicker-Week")
                
                
                for week_element in weeks:
                
                    
                    row = week_element.find_elements_by_class_name("DayPicker-Day")
                            
                        
                    for day_element in row:
                        if day_element.text == "":
                            continue
                        
                        if int(day_element.text) == day:
                            
                            #enter date 
                            browser.execute_script("arguments[0].click();arguments[0].click();", day_element)
                            
                            #### scraping for news ####
                            
                            timeout = time() + 4
                            
                            while time() < timeout: 
                                try:
                                    #Reload FX calendar news element                           
                                    fx_calendar = browser.find_element_by_xpath('//*[@id="Content_C164_Col00"]/div[4]')
                            
                                    table = fx_calendar.find_element_by_css_selector("  div > div.fxs_c_ecocal_data > table > tbody")
                                    
                                    event_list = table.find_elements_by_class_name("fxs_c_row")
                                    
                                    print("event_list contains "+event_list.size() + " events")
                                    
                                    #Exit poll when event_list has events
                                    if event_list:
                                        
                                        break
                                    
                                except:
                                    
                                    continue
                            
                            df = pd.DataFrame(columns = ["time", "event_name", "subheader", "actual_result",
                                                         "consensus_forecast", "deviation", "previous_result",
                                                         "news_link"])
                            
                            for event in event_list:
                                
                                try:
                                    raw_time = event.find_element_by_class_name("fxs_c_time").find_element_by_tag_name("span").text
                                    print("rawtime :", raw_time)
                                except:
                                    print("raw_time except")
                                    raw_time = ""
                                    
                                try:
                                    currency = event.find_element_by_class_name("fxs_c_currency").find_element_by_tag_name("span").text
                                    print("currency :", currency)
                                except:
                                    print("currency except")
                                    currency = ""
                                    
                                name_element = event.find_element_by_class_name("fxs_c_name")
                                
                                try:    
                                    name = name_element.find_element_by_xpath(".//span[1]/span[1]").text
                                    print("name :", name)
                                    bracket = name_element.find_element_by_xpath(".//span[1]/span[3]/span").text
                                    print("bracket :", bracket)
                                    print(name)
                                except:
                                    name = name_element.find_element_by_xpath(".//span[1]").text
                                    print("name :", name)
                                    print("name except")
                                    bracket = ""
                                
                                try:
                                    actual = event.find_element_by_class_name("fxs_c_actual").find_element_by_tag_name("strong").text
                                    print("actual :", actual)
                                except:
                                    print("actual except")
                                    actual = ""
                                
                                try:
                                    deviation = event.find_element_by_class_name("fxs_c_deviation").text
                                    print("deviation :", deviation)
                                except:
                                    print("deviation except")
                                    deviation = ""
                                
                                try:
                                    consensus = event.find_element_by_class_name("fxs_c_consensus").text
                                    print("consensus :", consensus)
                                except:
                                    print("consensus except")
                                    consensus = ""
                                    
                                try:
                                    previous = event.find_element_by_class_name("fxs_c_previous").text
                                    print("previous :", previous)
                                except:
                                    print("previous except")
                                    previous = ""
                                
                                try:
                                    link =  event.find_element_by_class_name("fxs_c_dashboard").find_element_by_css_selector("a")\
                                    .get_attribute("href")
                                    print("link :", link)
                                except:
                                    print("except")
                                    link = ""
                                
                                event_row = {"time" : raw_time, "event_name" : name, "subheader" : bracket,
                                             "actual_result" : actual, "consensus_forecast" : consensus,
                                             "deviation" : deviation, "previous_result" : previous,
                                             "news_link" : link}
                                
                                df = df.append(event_row, ignore_index = True)
                                
                                print("---------------------------")
                                
                            return df
                        
                raise Exception("Day out of bounds for month")
                break
            
            else:
                curr_month = month_list.index(month_1[0])
                
                if curr_year == year:
                    
                    if curr_month < month:
                        
                        #Go to next month
                        browser.execute_script("arguments[0].click();", next_month)
                    
                        
                    elif curr_month > month:
                        
                        #Go to previous month
                        browser.execute_script("arguments[0].click();", prev_month)

                
                elif curr_year < year:
                    
                    #Go to next month
                    browser.execute_script("arguments[0].click();", next_month)

                
                elif curr_year > year:
                    
                    #Go to previous month 
                    browser.execute_script("arguments[0].click();", prev_month)

                             




















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































